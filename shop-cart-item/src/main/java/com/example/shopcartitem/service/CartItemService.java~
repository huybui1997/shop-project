package com.example.shopcartitem.service;

import com.example.shopcart.entity.Cart;
import com.example.shopcart.repository.CartRepository;
import com.example.shopcartitem.dto.CartItemDto;
import com.example.shopcartitem.dto.CreateCartItemRequest;
import com.example.shopcartitem.entity.CartItem;
import com.example.shopcartitem.repository.CartItemRepository;
import com.example.shopcore.dto.ApiResponse;
import com.example.shopcore.exception.BusinessException;
import com.example.shopproduct.entity.Product;
import com.example.shopproduct.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class CartItemService {

    private final CartItemRepository cartItemRepository;
    private final CartRepository cartRepository;
    private final ProductRepository productRepository;

    public ApiResponse<CartItemDto> createCartItem(Long cartId, CreateCartItemRequest req) {
        // Kiem tra QUantity
        if(req.getQuantity() == null || req.getQuantity() < 1)
            throw new BusinessException("Quantity >= 1");

        //Kiem tra cart co ton tai khong
        Cart cart = cartRepository.findById(cartId)
                .orElseThrow(() -> new BusinessException("Cart not found"));

        //Kiem tra product co ton tai khong
        Product product = productRepository.findById(req.getProductId())
                .orElseThrow(() -> new BusinessException("Product not found"));


        try{
            // Lay san, neu chu co thi tao moi
            CartItem item = cartItemRepository.findByCartIdAndProductId(cartId, product.getId())
                    .orElseThrow(() -> cartItemRepository.save(
                            CartItem.builder()
                                    .cart(cart)
                                    .product(product)
                                    .quantity(0)
                                    .build()
                    ));

                    item.setQuantity(item.getQuantity() + req.getQuantity());

            return ApiResponse.ok(
                    CartItemDto.builder()
                            .id(item.getId())
                            .cartId(cart.getId())
                            .productId(product.getId())
                            .quantity(item.getQuantity())
                            .build()
            );


        } catch (DataIntegrityViolationException e){
            CartItem item = cartItemRepository.findByCartIdAndProductId(cartId, product.getId())
                    .orElseThrow(() -> new BusinessException("Product already in cart"));

            item.setQuantity(item.getQuantity() + req.getQuantity());
            return ApiResponse.ok(
                    CartItemDto.builder()
                            .id(item.getId())
                            .cartId(cart.getId())
                            .productId(product.getId())
                            .quantity(item.getQuantity())
                            .build()
            );
        }

    }
}
